-------------------------------
-------------------------------
data ℕ : Set where
  zero : ℕ
  succ : ℕ → ℕ

_+_ : ℕ → ℕ → ℕ
zero   + b = b
succ a + b = succ (a + b)

_·_ : ℕ → ℕ → ℕ
zero   · b = zero
succ a · b = b + (a · b)

-------------------------------
-------------------------------

-----------------
----[ LISTS ]----
-----------------

-- List is an object of a given type (A)
data List (A : Set) : Set where
  -- base element (empty list)
  []  : List A
  -- prepend function prepend(x, list) = [x,list]
  _∷_ : A → List A → List A

list_example : List ℕ -- with ℕ we declare its element will be naturals
list_example = (succ (succ (succ zero))) ∷ ((succ (succ zero)) ∷ (succ zero ∷ []))
--           = [3,2,1]

------------------------------------------
-- >> EXERCISE 1
-- Define a function which sums the numbers of a given list
------------------------------------------
sum : List ℕ → ℕ
sum [] = zero
sum (x ∷ xs) = x + (sum xs)

-- >> sum list_example                           → (sum [1,2,3])
-- succ (succ (succ (succ (succ (succ zero)))))  → (6)

------------------------------------------
-- >> EXERCISE 2
-- Define the "map" function.
-- For instance, "map f (x ∷ y ∷ z ∷ []) = f x ∷ f y ∷ f z ∷ []".
------------------------------------------

map : {A B : Set} → (A → B) → List A → List B
map f [] = []
map f (x ∷ xs) = (f x) ∷ (map f xs)

-- >> map (λ xs → xs + (succ zero)) list_example
-- succ (succ (succ (succ zero))) ∷ (succ (succ (succ zero)) ∷ (succ (succ zero) ∷ []))

-- Note: (λ xs → xs + (succ zero)) is the syntax to define an anonymous function
-- λ that takes xs as input and adds succ zero to it (adds one)

-------------------
----[ VECTORS ]----
-------------------
-- The difference is that Vector has a fixed lenght

data Vector (A : Set) : ℕ → Set where
  []  : Vector A zero
  _∷_ : {n : ℕ} → A → Vector A n → Vector A (succ n)

vector_example : Vector ℕ (succ (succ (succ zero)))
vector_example = zero ∷ ((succ zero) ∷ ((succ (succ (succ zero))) ∷ []))

------------------------------------------
-- >> EXERCISE 3
-- Define a function which computes the length of a given vector.
-- There are two possible implementations, one which runs in constant time
-- and one which runs in linear time.
------------------------------------------

-- Very trivial function:
-- When you pass the vector, it returns its lenght
-- being one of its parameters
lenghtV : {n : ℕ} {A : Set} → Vector A n → ℕ
lenghtV {n} {A} xs = n




